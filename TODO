- Ray stream tracing:
	- Optimizations...

- Implement proper "scene" data structure
	- Should have built-in methods for manipulating and transforming it, for
	  e.g. optimization.
	- The scene is like a database with references.
	- For the first iteration, leave lights out of the scene hierarchy, and
	  just have them be a flat list.  Later iterations can find ways to
	  integrate them.

- Implement transforms and instancing:
	- The input to the acceleration structure is a scene hierarchy rather
	  than primitives added one-at-a-time.  There can be separate code
	  completely outside of the accel builder that optimizes the scene
	  hierarchy (e.g. applying static transforms, collapsing meaningless motion
	  transforms, de-instancing instances that only appear once, etc.).  Then
	  the responsibility of the accel builder is purely to take that
	  straight-forward description and make an accel structure for it.
	- Scene file(s)
	   |PARSER|
	  Scene hierarchy
	   |OPTIMIZER(S)|
	  Optimized scene hierarchy
	   |ACCEL BUILDER|
	  Acceleration structure

- Implement a shading system
	- Proper ray differentials
	- Stupid simple shaders first
	- Then use OSL

- More geometry types:
	//- Bicubic bezier patches
	- Catmull-clark subdivision surfaces
	- Triangle meshes
	//- Make spheres work again

- Performance improvements:
	- Change MicroSurface to use a BVH4
	- Investigate ways to make splitting and splitting-traversal faster:
		- Can we do BVH4 style traversal?

- Adaptive sampling scheme
	- "Population Monte Carlo"

- Film class:
	- Change Film class to allow locks on "buckets" of pixels, so that
	  threads can concurrently write to the Film instead of blocking
	  each other.
	- Make film class more data-type agnostic.  It should be the responsibility
	  of the Renderer and Integrator to make sure pixel data is interpretted and
	  used correctly.

- Cleanup:
	- Get rid of TimeBox class -- it's totally unnecessary
	- Add NaN and Inf catching to key places in code
	- Surface Primitives should calculate their own pre-displacement surface normals

- Splitting:
	- Splitting code should have protection against stack overflow.
